@startuml
left to right direction

class Ingresso <<entity>>{
    -id: String
    -valor: float
    -evento: Evento
    -cliente: Cliente
    -lote: Lote
    -data_emissao: Date
    -data_evento: Date
    -setor: String
    -situacao: String
}

class TelaIngresso{
    -campo_id: String
    -campo_valor: String
    -campo_evento: String
    -campo_cliente: String
    -campo_lote: String
    -campo_data_emissao: String
    -campo_data_evento: String
    -campo_setor: String
    -campo_situacao: String
    -botao_enviar: Botao
    +enviar(*args): String[]
}

class ControleIngresso{
    +realizar_reembolso(cliente: Cliente, ingresso: Ingresso): boolean
    +realizar_compra(cliente: Cliente, ingresso: Ingresso): boolean
    +realizar_validacao()(cliente: Cliente, ingresso: Ingresso): boolean
}

class Evento{
    -id: String
    -nome: String
    -local: Local
    -horario: String
    -data: Date
    -qnt_maxima: int
    -tipo: String
    -lotes: Lote[]
    -ingressos_vendidos: int
    -situacao: String
    -motivo_cancelamento: String
    -motivo_adiamento: String
    -organizador: Organizador
    
}

class AgendaEvento{
    +listar_eventos(id_local: String): List<Evento>
    +verificar_disponibilidade(id_local: String, data: Date): boolean
}

class TelaEvento{
    -campo_nome: String
    -campo_local: String
    -campo_horario: String
    -campo_data: String
    -campo_qnt_maxima: int
    -campo_tipo: String
    -campo_lotes: String[]
    -campo_situacao: String
    -campo_motivo_cancelamento: String
    -campo_motivo_adiamento: String
    -campo_organizador: String
    -botao_enviar: Botao
    +enviar(*args): String
}

class TelaListaEvento{
    selecionarEvento(id_evento: String): void
}

class ControleEvento{
    +listar_clientes(id_evento: String): List<Cliente>
    +buscarEvento(id_evento: String): Evento
    +cadastrar_evento(*args): Evento
    +atualizar_evento(*args): Evento
    +remover_evento(id_evento: String): boolean
    +listar_eventos(): List<Evento>
}

class BD{
    consultarEvento(id_evento: String): String[]
}


abstract class Usuario{
    -id: String
    -nome: String
    -telefone: String
    -email: String
}
class Cliente<Usuario>{
    -cpf: String
    -ingressos: List<Ingresso>
}

class TelaCliente{
    -campo_nome: String
    -campo_telefone: String
    -camp1o_email: String
    -campo_cpf: String
    -campo_ingressos: String
    -botao_enviar: Botao
    +enviar(*args): String[]
}

class ControleCliente{
    +cadastrar_cliente(*args): Cliente
    +atualizar_cliente(*args): Cliente
    +remover_cliente(id_cliente: String): boolean
    +listar_clientes(): List<Cliente>
}

class Organizador<Usuario>{
    -eventos: List<Evento>
    -cpf_cnpj: String
}

class TelaOrganizador{
    -campo_nome: String
    -campo_email: String
    -campo_telefone: String
    -campo_eventos: String
    -campo_cpf_cnpj: String
    -botao_enviar: Botao
    +enviar(*args): String[]
}

class ControleOrganizador{
    +cadastrar_organizador(*args): Organizador
    +atualizar_organizador(*args): Organizador
    +remove_organizador(id_organizador: String): boolean
    +listar_organizadores(): List<Organizador>
}

class Lote{
    -id: String
    -quantidade_ingressos: int
    -data_inicio: Date
    -data_fim: Date
    -valor: float
}

class TelaLote{
    -campo_quantidade_ingressos: String
    -campo_data_inicio: String
    -campo_data_fim: String
    -campo_valor: String
    -botao_enviar: Botao
    +enviar(*args): String[]
}

class ControleLote{
    +cadastrar_lote(*args): Lote
    +listar_lotes(): List<Lote>
    +atualizar_lotes(*args): Lote 
    +remover_lotes(id_lote: String): boolean
}

class Local{
    -id: String
    -nome: String
    -endereco: String
    -capacidade_max: int
    -tipo: String
}

class TelaLocal{
    -campo_nome: String
    -campo_endereco: String
    -campo_capacidade_max: String
    -campo_tipo: String
    -campo_agenda_eventos: String[]
    -botao_enviar: Botao
    +enviar(*args): String[]
}

class ControleLocal{
    +cadastrar_local(*args): Local
    +atualizar_local(*args): Local
    +remover_local(id_local: String): boolean
    +listar_locais(): List<Local>
}

Ingresso "0..*"--"1..*" Cliente: < possui
Ingresso o-- Lote: < possui
Ingresso "*"--"1..*" Evento: < possui

Evento "1"--"1" Local: possui >
(Evento, Local) .. AgendaEvento
Evento "1"--"1..*" Lote: possui >
Evento "1..*"--"1..*" Organizador: possui >

TelaIngresso "1"--"1" ControleIngresso: solicita > 
ControleIngresso "1"--"0..*" Ingresso: controla >

TelaCliente -- ControleCliente: solicita >
ControleCliente -- Cliente: controla >

TelaLote -- ControleLote: solicita >
ControleLote -- Lote: controla >

TelaEvento ..> ControleEvento: solicita >
ControleEvento ..> Evento: controla >
ControleEvento ..> BD: solicita >

TelaListaEvento ..> ControleEvento: solicita >

TelaLocal -up- ControleLocal: solicita >
ControleLocal -up- Local: controla >

TelaOrganizador -- ControleOrganizador: solicita >
ControleOrganizador -- Organizador: controla >

Cliente --|> Usuario
Organizador --|> Usuario

ControleEvento -- ControleIngresso: solicita >
ControleIngresso -- ControleCliente: solicita >

ControleEvento -- ControleLocal: solicita >
ControleEvento -- ControleLote: solicita >



@enduml